* note: after any change in webpack config we have to run "npm run dev"
* note: if package is development dependent only then it is followed by --save-dev
 
1. take the sample-site and name accordingly
2. make new repo on github with same name
3. follow git commands to push the folder to github
4. "npm init -y" to create package.json file (this will keep track of packages)
5. "npm install normalize.css"
    
    //note: if any time node_modules folder get deleted then we just have to do "npm install"-
  
6. now create scripts(folder) in assets & within the scripts folder create App.js(file)

7. put alert test in App.js as below and save
alert("test")

8. "npm install webpack webpack-cli --save-dev"

9. after installing webpack create a new file in the root with the name webpack.config.js 

10. in webpack file make a entry for App.js as

module.exports = {
    entry: './app/assets/scripts/App.js'
}

11. add below in the scripts object in the package.json file

"dev": "webpack",

12. save both "webpack.config" & "package.json" file and run "npm run dev" from command line 
    ..and check if dist folder is created with main.js file within. 
    
    //everything shud working fine without any error till here-

    //note: from now on "npm run dev" is the app running command to run the app through webpack-

     //webpackChange1: mode psition has changed
13. to change the name of the "main.js" folder to "bundled.js" and location from the dist 
    to within the app(folder)
     
           //delete the dist folder and do following code as below in the webpack.config.js---
    
const path = require('path')
module.exports = {
    mode: "development",             

    entry: './app/assets/scripts/App.js',
    output: {
        path:path.resolve(__dirname, "app"),
        filename: "bundled.js"
    }

}


14. run "npm run dev" to check for any error and look for "bundled.js" created or not in the app folder

15. now create <script> tag just above the closing </body> tag as given below to load bundles.js through index.html

<script src="bundled.js"></script>

16. run "npm run dev" and load index.html in browser to see if "test" alert pop-up in the browser.

                      //everything shud working fine without any error till here
                      //now can push to github

17. now do this to continue running npm

module.exports = {
    mode: "development",

    entry: './app/assets/scripts/App.js',
    output: {
        path:path.resolve(__dirname, "app"),
        filename: "bundled.js"
    },
    watch: true

}

               //css setup for web pack starts here

18. now create a folder name "style" and create a file name "style.css" in it

19. for a test write this in style.css

body{
    color: orange;
}

20. now import style.css in App.js as //because webpack only understands .js files and App.js is the main file
                                      // through which webpack starts bundelling
import '../styles/styles.css'

alert("test")

21. but it still wont load because it needs following packages stop npm and run this
npm install css-loader style-loader --save-dev

22. to leverage this packages set up webpack.config as

const path = require('path')

module.exports = {
    mode: "development",

    entry: './app/assets/scripts/App.js',
    output: {
        path:path.resolve(__dirname, "app"),
        filename: "bundled.js"
    },
    watch: true,

    module: {
        rules: [
            {
                test: /\.css$/i,
                use: ['style-loader','css-loader']
            }
        ]
    }

}

23. now run "npm install dev" //note: now body text will be orange in the browser, 
                              //can double check by changing body color


                   --// start adding post-css //--
24. run "npm install postcss-loader --save-dev" and change the "module" in webpack.config as 
const path = require('path')

const postCSSPlugins = [
    kkkkkk
]

module.exports = {
    mode: "development",

    entry: './app/assets/scripts/App.js',
    output: {
        path:path.resolve(__dirname, "app"),
        filename: "bundled.js"
    },
    watch: true,

    module: {
        rules: [
            {
                test: /\.css$/i,
                use: ['style-loader', 'css-loader', {loader: "postcss-loader", options: {postcssOptions:{plugins: postCSSPlugins}}}]
            }
        ]
    }

}

           //webpackChange2: in module extra "postcssOptions" has to be add
25. then run "npm install postcss-simple-vars postcss-nested autoprefixer --save-dev" plugins and leverage them in 
    webpack.config as
const path = require('path')

const postCSSPlugins = [
    require('postcss-simple-vars'),
    require('postcss-nested'),
    require('autoprefixer')
]

module.exports = {
    mode: "development",

    entry: './app/assets/scripts/App.js',
    output: {
        path:path.resolve(__dirname, "app"),
        filename: "bundled.js"
    },
    watch: true,

    module: {
        rules: [
            {
                test: /\.css$/i,
                use: ['style-loader', 'css-loader', {loader: "postcss-loader", options: {postcssOptions:{plugins: postCSSPlugins}}}]
            }
        ]
    }

}


26. then save and test it by change in "style.css" as

    //Hello everyone,

        By default, the css-loader will attempt to handle any images we reference in our CSS (e.g. background images, etc...). 
        While this is great in certain situations, for our usage in this course we want to disable this and we'll manage our 
        image files manually. With this in mind, when you list 'css-loader' in your webpack.config.js file you'll want to add 
        an option to the end of it like this 'css-loader?url=false' instead.

        For a complete reference, you can also simply use the webpack.config.js file I've added as a resource for this text lesson.

        Thanks!
        Brad


/////////////////////////////////// here start CSS and its architecture //////////////////////////////////////////////////

1. npm install postcss-import --save-dev and make changes in webpack.config as //to make styles.css import other modules 
                                                                                 of css and send it to app.js
                                                                               //Note: postcss.import is not necessary if project 
                                                                                 is very small just write the css code in style.css 
const path = require('path')

const postCSSPlugins = [
    require('postcss-import'),
    require('postcss-simple-vars'),
    require('postcss-nested'),
    require('autoprefixer')
]

module.exports = {
    mode: "development",

    entry: './app/assets/scripts/App.js',
    output: {
        path:path.resolve(__dirname, "app"),
        filename: "bundled.js"
    },
    watch: true,

    module: {
        rules: [
            {
                test: /\.css$/i,
                use: ['style-loader', 'css-loader?url=false', {loader: "postcss-loader", options: {postcssOptions:{plugins: postCSSPlugins}}}]
            }
        ]
    }

}


1. BEM - This is a method to give CLASS NAMEs to the elements in the html page so that css becomes more powerfull. it will 
eliminate the casacade from the css tool by giving power to the css by hooking on almost any element indipendently 
that means now there will be left no cascading of properties from parent div to child div ..and we can also controll 
that cascading by giving same "class names" to the desrired elements. These class names can be designate as Block, 
Element & Modifier according their pattern type. These patterns can be observed by looking on the design page.
Block level(.testimonial) class names can be "reused" but elemnent(.testimonial__image, .testimonial__text) level class 
names will be unique to that html element which is in that block. Modifier(mobile-menu),(btn) can be used to both 
Block and Element to change its default properties coming from Block or Element class as (mobile-menu--is-open),
(btn btn--orange btn--large).
Biggest advantage will be that we can create "grid type column layout" by applying "Single reponsibility" type 
Block classes and reuse them on the blocks which follow same Grid pattern in the design page.
Second biggest advantage is that it will make the HTML & CSS relation crystel clear by just reading their class names.
Which in turn make the maintenance so easy even after long time later. 

2. blockClass__itsElementClass //this is what "__" represents.
3. blockClass--modifierClass   //this is what "--" represents.

2. postcss allow us to write nested CSS by using & at the place of block class name and write it in the block 
level class name selector as..
             //note: & will become .large-hero and out of the block in compiled CSS 

.large-hero {
    position: relative;

    &__text-content {
        position: absolute;
        top: 50%;
        left: 0;
        transform: translateY(-50%);
    
        width: 100%;
        text-align: center;
    }

    &__title {
        font-weight: 300;
        color: #2f5572;
        font-size: 4.8rem;
    }

    &__subtitle {
        font-weight: 300;
        color: #2f5572;
        font-size: 2.9rem;
    }
}

3. rem should be used for font-size, padding, margin and max-width values. when we use rem everything is relative to 
the root of the page and root of the any web page is always an html element. So when we say 1.5rem the browser will 
take whatever the font size of that top main "html" element is and multiply it with 1.5 ..most web browser wl hv a 
default font-size on the "main html element" of about the equivalent the 16px. So when we say 1.5 its (1.5 X 16 =) 24px.
this will scale accordingly to the browser default size or that its set to by the user that may be means if someone 
zoomed in or out the webpage for personal reasons it will not disturb the layout.

4. for every new block "one new css file" will be created and dont forget to import that css file into the style.css


/////////////////////////////////// CSS setup and its code architecture ends here //////////////////////////////////////////////////

27. install "npm install webpack-dev-server --save-dev"
                     -advantages-
    //CSS and JS updates in the browser without a full reload.
    //Webpack reloads the browser for us when we save a change to our html file.
    //View our site on any device connected to the same wifi/network as the computer we're working on.

28. to imlpiment web-pack dev server //change in webpack.config by adding new key as devServer:
    //first do change in package.json by coverting "dev": "webpack", to "dev": "webpack serve", in scripts key
    //note: always look for webpack website for any new update in webpack.config and its implimentation in other files. 

const path = require('path')

const postCSSPlugins = [
    require('postcss-import'),
    require('postcss-simple-vars'),
    require('postcss-nested'),
    require('autoprefixer')
]

module.exports = {
    
    entry: './app/assets/scripts/App.js',
    output: {
        path:path.resolve(__dirname, "app"),
        filename: "bundled.js"
    },

    devServer: {
        /*to auto reload all html files in app folder*/
        before: function(app, server) {
            server._watch( './app/**/*.html' )
        },

        /*to auto reload all CSS and js files in app folder*/
        contentBase: path.join(__dirname, 'app'),

        hot: true,
        port: 3000,

        /*to open in any device using ipv4 address(192.168.1.6) with port number (:3000) as 192.168.1.6:3000*/
        host: '0.0.0.0'
    },

    mode: "development",
    
    module: {
        rules: [
            {
                test: /\.css$/i,
                use: ['style-loader', 'css-loader?url=false', {loader: "postcss-loader", options: {postcssOptions:{plugins: postCSSPlugins}}}]
            }
        ]
    }    

}

29. to get the IPv4 address to open in "any device" run ipconfig command in computer's admin command prompt and look 
    for IPv4 address.

/////////////////////////////////// CSS & html coding starts here //////////////////////////////////////////////////

1. to apply mobile-first approach we write mobile code as base-line and for larger screens code will go into 
   the @media(min-width: 530px){new css for larger screens for the same element}

2. to achieve above efficiently we use mixin package from post css as "npm install postcss-mixins --save-dev"

3. require in the postcss-mixins package in postcssPlugins variable as require('postcss-mixins'),

4. create a new css file _mixins in base folder and write following queries for all media screens as
/*base line will be for smallest mobile screens*/


/*for large mobile screens*/
@define-mixin atSmall {
    @media (min-width: 530px) {
        @mixin-content;
    }
}


/*for tablet screens or small desktop screens*/
@define-mixin atMedium {
    @media (min-width: 800px) {
        @mixin-content;
    }
}


/*for desktops screens*/
@define-mixin atLarge {
    @media (min-width: 1200px) {
        @mixin-content;
    }
}

5. now use any media query by writing just "@mixins atSmall {}" or "@mixins atLarge {}" in any css file for 
   any particular element to be resposive.

6. to make the image 'responsive' and 'data-efficient' we depend totally on "images of 3 diffrent size and 3 differet 
   resolutions for SINGLE IMAGE" and the html. we change the html for a single image <img src="assets/images/hero--smaller.jpg"> 
   to html of 6 different images as

<picture>
      <source srcset="assets/images/hero--large.jpg 1920w, assets/images/hero--large-hi-dpi.jpg 3840w" media="(min-width: 1380px)"> <!--for large desktop screens-->
      <source srcset="assets/images/hero--medium.jpg 1380w, assets/images/hero--medium-hi-dpi.jpg 2760w" media="(min-width: 990px)"> <!--for small desktop screens-->
      <source srcset="assets/images/hero--small.jpg 990w, assets/images/hero--small-hi-dpi.jpg 1980w" media="(min-width: 640px)"> <!--for tablets and large mobile screens-->
      <img srcset="assets/images/hero--smaller.jpg 640w, assets/images/hero--smaller-hi-dpi 1280w.jpg" alt="Coastal view"> <!--for small mobile screens-->
</picture>

7. "page-section" class creating the page section using "padding-top" and "background-color" for sections and wrapper 
    class creating the 1200px container.

8. always use em instead of rem for text margin as it is relative to the size of the font.

9. using so many modifier classes for a particular group of text style is a best practice and will be very useful if 
   website is too large consists of around 100 pages then repeating of same style is easy instead of hooking on a single 
   class for each element to style them.

10. to create column layout create a _row.css for that rows which contain more then one coloumn in design then to 
    create column put appropriate content in different divs and put classes as row__4, row__8 as 4 represents 4 out 
    of 12 column to represent 1/3rd space of the container that is of 1200px and 8 reprents the remaining 2/3rd of 
    that container.  calculate width% of the row__4 and row__8 buy (100/12)*4 and (100/12)*8

11. to tackle float issue use below in mixin and call it in any css class thai is using float as "@mixin clearfix;"
@define-mixin clearfix {
    &::after {          /*tackling float problem by adding and clearing an empty content after this*/
        content: "";
        clear: both;
        display: table;
    }
}   

12. add modifier class "row--gutters" to add gutters betwwen the columns and access the childrens to create 
    gutter b/w them as

&--gutters > div {
        padding-right: 65px;
    }     

13. also to achieve above we have to put below in global css for all elements
* {
    box-sizing: border-box; 
}

and put overflow: hidden; in wrapper class

14. but we want above changes only for medium size screens so change row__4 to row__medium-4 and put it in the mixin for 
    medium size screens and do the same for row__8

    //note: after every completion of a section adjust it for mobile screens also

15. to adjust the fine size of columns we can further create "row__medium-4--larger" & "row__medium-8--smaller"

16. pro tip for images which dont take full screen width is just add extra sizes="404px" attribute before srcset to 
    prevent the browser to download hi-dpi images. thats happening because for not full screen width images browser 
    assume it to be a full screen width image and downloads the hi-dpi image.

17. flex-box comes into play at 2nd ch of testimonials where white bg height is different because of diffrent size of text
    text content and we want all of them to behave as height as that of a tallest content.

18. postcss plugin "hexrgba" wl allow postcss to convert hex value to rgba code even if that hex value saved in a variable 
    do "npm install postcss-hexrgba --save-dev" and upadate the plugon in pluggin variable in webpack config. 

@ webpack lodash package is used to call javascript functions only when it is needed
npm install lodash  //since it is not dev dependency
import it in the class as "import throttle from 'lodash/throttle'" and "import debounce from 'lodash/debounce'"
//note: this chapter is best to understand performance based code writing and reusable class in JS.

//just for info: event-emitter is a package which we can use to interact one js file to other for 
  complex projects

npm install lazysizes  //for lazyloading 

----------------------------coding done here and build process starts-------------------------------------------------------------

1. create and checkout to new branch named build-process

2. add "build": "webpack", just below the "dev" in package.json

3. now setup the webpack so that it can work for both dev and build command as
const currentTask = process.env.npm_lifecycle_event
const path = require('path')

const postCSSPlugins = [
    require('postcss-import'),
    require('postcss-mixins'),
    require('postcss-simple-vars'),
    require('postcss-nested'),
    require('postcss-hexrgba'),
    require('autoprefixer')
]

let config = {

    entry: './app/assets/scripts/App.js',

    module: {
        rules: [
            {
                test: /\.css$/i,
                use: ['style-loader', 'css-loader?url=false', {loader: "postcss-loader", options: {postcssOptions:{plugins: postCSSPlugins}}}]
            }
        ]
    } 
}

if (currentTask == 'dev') {

    config.output = {
        path:path.resolve(__dirname, "app"),
        filename: "bundled.js"
    }

    config.devServer = {
        /*to auto reload all html files in app folder*/
        before: function(app, server) {
            server._watch( './app/**/*.html' )
        },

        /*to auto reload all CSS and js files in app folder*/
        contentBase: path.join(__dirname, 'app'),

        hot: true,
        port: 3000,

        /*to open in any device using ipv4 address(192.168.1.6) with port number (:3000) as 192.168.1.6:3000*/
        host: '0.0.0.0'
    }

    config.mode = 'development'
}

if (currentTask == 'build') {
    
    config.output = {
        path:path.resolve(__dirname, "dist"),
        filename: "bundled.js"
    }

    config.mode = 'production'
}


module.exports = config

4. "npm run build" will create new dist folder but only with bundelled.js and seperate modal js file

5. optimization code //new webpack5 method used


6. npm install clean-webpack-plugin --save-dev  //to delete previous chunks on each build
   const {CleanWebpackPlugin} = require('clean-webpack-plugin')

7. //extracting CSS from main.js in a new seperate file 
    npm install mini-css-extract-plugin --save-dev  //to get css seperate file on each build
    const MiniCssExtractPlugin = require('mini-css-extract-plugin')

8. npm install cssnano --save-dev //to compress css file //"this setup failed//do it later
   postCSSPlugins.push(require('cssnano'))

9.  //to create html file
    first delete the bottom script tag from index.html
    npm install html-webpack-plugin --save-dev
    const HtmlWebpackPlugin = require('html-webpack-plugin') //use this for both dev and build tasks

    npm install fs-extra --save-dev //optional: if we hv different html pages other then index.html
    const fse = require('fs-extra') //"this is current setup"
    or
    we can use "static site generator" when html pages are more then 10 

10. //to transfer images automatically in dist file made your own plugin using fse as
new RunAfterComplile()

class RunAfterComplile {
    apply(compiler) {
        compiler.hooks.done.tap('Copy images', function() {
            fse.copySync('./app/assets/images', './dist/assets/images')
        })
    }
}


11. //to make our modern js compatible with old browsers as old style js then use below 3 packages
    npm install @babel/core @babel/preset-env babel-loader --save-dev

--rename dist folder to docs or any just @2places in present webpack.config  //"docs" is for github deploy purpose--

THIS PROJECT ENDS HERE



